from audioop import add
import numpy as np
import matplotlib.pyplot as plt
import sys
import time

#verryyttely tehtävä

''' a= np.arange(25).reshape(5,5)

print(a) #kokolista
print(a[:,1::2])
print(a[1:4:2,0:3:2]) #tai (a[1::2,0:3:2])
print(a[4:]) '''

'''
Let's prove 3 things where NumPy is better than just Python data structures

1) Numpy requires less memory
2) Numpy is faster
3) Numpy is convenient

'''

N = 100000
pythonList = range(N)
# as all python list elements are objects we can calculate memory
# size of a Python list as follows (number of elements * element size)
#print("Python list size = ", len(pythonList)*sys.getsizeof(1))

'''
Your task is to first create N element wide NumPy list, then
calculate and print NumPy list size. Hint. use size and itemsize attributes of 
NumPy


'''
print("T1 alkaa tästä")
L=1234
list=np.arange(L)
print(np.size(list))

# And now we demonstrate that NumPy is faster
# Let's multiply lists generated by themselves
start = time.time()

pythonListResult = [(x+y) for x,y in zip(pythonList,pythonList)]
print("Adding each element in a Python list took =",(time.time()-start)*1000,"ms")

todisteLista=[1,2,3,4]
todisteLista2=[100,200,300,400]

for x,y in zip(todisteLista,todisteLista2):
       print(x,y)
       print("kierros", x)

print("T1 loppuu tästä")

#t2
print("T2 alkaa tästä")
tehtava2L1=range(N)
tehtava2=[]
terve=0
start2 = time.time()
while terve < N:
       tehtava2.append(tehtava2L1[terve] + tehtava2L1[terve])
       terve=terve+1
print(tehtava2)
print((time.time()-start2)*1000,"ms")
print("T2 loppuu tähän")

#t3
print("T3 alkaa tästä")
start3=time.time()

nplist=np.arange(0,N,1)
addition=nplist+nplist
print(nplist)
print(addition)
print((time.time()-start3)*1000,"ms")

print("T3 loppuu tähän")

# aikas=(time.time()-start)*1000
# aikaa=[start, aikas]


fig, joo= plt.subplots(3,1)   #rivit, sarakkeet

joo[0].plot(pythonListResult,'' )
joo[0].set_ylabel('Pythonlist for-loop')
joo[1].plot(tehtava2,'')
joo[1].set_ylabel('pythonlist while-loop')
joo[2].plot(addition,'')
joo[2].set_ylabel('Nplist')

plt.show()

#T5
'''
Numpy is nice because the syntax is easier (shorter, more functions) compared to vanilla python.
Numpy array additions are faster because of how numpy allocates memory in continous memory area,
where vanilla python may fragment the data inside lists / arrays in different areas, so its slower to access.
'''
'''
Your tasks are the following:
1) prove to yourself that line 33 actually does element by element addition
2) use some other Python looping function to implement python list element by element
   addition and measure its time
3) Implement NumPy list addition without for loop (as NumPy can do vector and matrix
   additions without a loop function). And measure NumPy list addition time
4) plot (with help of plt.subplot) 3 results 1) python list addition result,
   2) your own loop addition result and 3) NumPy list addition result to one figure
   and of course all 3 results should be the same
5) Explain in a comment of your python file why NumPy is convenient (mukava)

'''



